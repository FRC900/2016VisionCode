cmake_minimum_required(VERSION 2.8)
project( zv)
set(CMAKE_LEGACY_CYGWIN_WIN32 0) # Remove when CMake >= 2.8.4 is required
set(CMAKE_BUILD_TYPE Release)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -Ofast -flto")
set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -Ofast -flto")
if (${CMAKE_LIBRARY_ARCHITECTURE} STREQUAL "arm-linux-gnueabihf")
  set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -mcpu=cortex-a15 -mfpu=neon-vfpv4")
  set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -mcpu=cortex-a15 -mfpu=neon-vfpv4")
else()
  set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -march=native")
  set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -march=native")
endif()
find_package( OpenCV REQUIRED )
find_package(ZED 0.8.2 REQUIRED)
find_package(CUDA 6.5 REQUIRED)
find_package(OpenMP REQUIRED)
find_package(Boost REQUIRED)
find_package (Threads)
include_directories( ${OpenCV_INCLUDE_DIRS} ../C920VideoCap ../networktables/include ${ZED_INCLUDE_DIRS} ${CUDA_INCLUDE_DIRS})
link_directories(${ZED_LIBRARY_DIR})
link_directories(${CUDA_LIBRARY_DIRS})

add_executable( zv test.cpp objdetect.cpp detectstate.cpp mediain.cpp videoin.cpp camerain.cpp ../C920VideoCap/C920Camera.cpp c920camerain.cpp imagein.cpp track.cpp classifierio.cpp Args.cpp WriteOnFrame.cpp zedin.cpp) 

IF(CYGWIN)
   find_library (LibNT networktables PATH ../networktables/lib-x86_64-cygwin )
ELSE()
   find_library (LibNT networktables PATH ../networktables/lib-${CMAKE_LIBRARY_ARCHITECTURE} )
ENDIF()
target_link_libraries( zv ${OpenCV_LIBS} ${LibNT} ${CMAKE_THREAD_LIBS_INIT} ${ZED_LIBRARIES} ${CUDA_LIBRARIES} ${CUDA_nppi_LIBRARY} ${CUDA_npps_LIBRARY})

# Code to test for bugs in GPU classifier code. Think this is fixed
# so for now don't build this code
#add_executable( gputest gputest.cpp objdetect.cpp classifierio.cpp )
#target_link_libraries( gputest ${OpenCV_LIBS} )

add_executable( fpstest fpstest.cpp objdetect.cpp mediain.cpp videoin.cpp )
target_link_libraries( fpstest ${OpenCV_LIBS} )
